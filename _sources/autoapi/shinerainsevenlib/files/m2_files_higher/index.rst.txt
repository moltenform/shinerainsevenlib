shinerainsevenlib.files.m2_files_higher
=======================================

.. py:module:: shinerainsevenlib.files.m2_files_higher


Functions
---------

.. autoapisummary::

   shinerainsevenlib.files.m2_files_higher.openDirectoryInExplorer
   shinerainsevenlib.files.m2_files_higher.openUrl
   shinerainsevenlib.files.m2_files_higher.findBinaryOnPath
   shinerainsevenlib.files.m2_files_higher.hasherFromString
   shinerainsevenlib.files.m2_files_higher.computeHashBytes
   shinerainsevenlib.files.m2_files_higher.computeHash
   shinerainsevenlib.files.m2_files_higher.windowsUrlFileGet
   shinerainsevenlib.files.m2_files_higher.windowsUrlFileWrite
   shinerainsevenlib.files.m2_files_higher.runWithoutWait
   shinerainsevenlib.files.m2_files_higher.runWithTimeout
   shinerainsevenlib.files.m2_files_higher.run
   shinerainsevenlib.files.m2_files_higher.runPskill
   shinerainsevenlib.files.m2_files_higher.makeShortcut
   shinerainsevenlib.files.m2_files_higher.isSymlink
   shinerainsevenlib.files.m2_files_higher.runRsync


Module Contents
---------------

.. py:function:: openDirectoryInExplorer(path)

   Open directory in operating system, like finder or windows explorer.


.. py:function:: openUrl(url, filterChars=True)

   Open a url in the default browser


.. py:function:: findBinaryOnPath(name)

   Works like 'which' on linux; finds the path to a binary executable.

   For example, notepad.exe -> c:\windows\system32\notepad.exe.

   This even knows about .bat and .exe on windows platforms


.. py:function:: hasherFromString(s)

   Get a hash function from a string. If you've
   installed xxhash, you can use 'xxhash_32' and 'xxhash_64' here.


.. py:function:: computeHashBytes(b, hasher='sha1', buffersize=defaultBufSize)

   Get hash of a bytes object, or a crc32


.. py:function:: computeHash(path, hasher='sha1', buffersize=defaultBufSize)

   Get hash of file, or a crc32


.. py:function:: windowsUrlFileGet(path)

   Extract the url from a windows .url file


.. py:function:: windowsUrlFileWrite(path, url)

   Create a windows .url file


.. py:function:: runWithoutWait(listArgs)

   Run process without waiting for completion


.. py:function:: runWithTimeout(args, *, shell=False, createNoWindow=True, throwOnFailure=True, captureOutput=True, timeoutSeconds=None, stripText=True, addArgs=None)

   Run a process, with a timeout.
   on some windows IDEs, starting a process visually shows a black window appearing,
   so can pass createNoWindow to prevent this.
   returns tuple (returncode, stdout, stderr)


.. py:function:: run(listArgs, *, shell=False, createNoWindow=True, throwOnFailure=RuntimeError, stripText=True, captureOutput=True, silenceOutput=False, wait=True, confirmExists=False)

   Run a process.
   on some windows IDEs, starting a process visually shows a black window appearing,
   so can pass createNoWindow to prevent this.

   By default throws if the process fails (return code is nonzero).

   returns tuple (returncode, stdout, stderr)


.. py:function:: runPskill(processName, pathToPskill='pskill')

   Use pskill to terminate a process. processName like notepad.exe.


.. py:function:: makeShortcut(sourcePath, targetPath)

   Create a symlink (or .lnk shortcut on Windows)


.. py:function:: isSymlink(path)

   Is the path a symlink.

   Confirmed works on Windows (where symlinks are rare but
   can be created with tools like ``mklink``)


.. py:function:: runRsync(srcDir, destDir, deleteExisting, useRobocopy=False, robocopyExcludeFiles=None, robocopyExcludeDirs=None, excludeRelative=None, excludeWithName=None, throwOnFailure=True, checkExist=True, binPath=None)

   Use rsync to copy files between directories.

   On Windows, if you do not have rsync, you can use the flag useRobocopy.

   Robocopy has separate robocopyExcludeFiles and robocopyExcludeDirs
   parameters because the semantics are different than rsync, e.g.
   in how they handle glob patterns and relative paths.

   robocopy does many retries on failure, which can appear as hangs,
   we work around this by proactively checking for problems like locked files
   in the destination. Setting retries to 0 could mask other problems.


